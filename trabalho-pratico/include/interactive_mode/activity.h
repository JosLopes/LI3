/*
 * Copyright 2023 Humberto Gomes, José Lopes, José Matos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file  activity.h
 * @brief A TUI activity (user interface) for interactive_mode.h
 *
 * @anchor activity_examples
 * ### Examples
 *
 * Creating a new activity is as simple as defining three functions, one for each of the callback
 * types defined in this file. All data about your activity should be stored in the `activity_data`
 * argument provided to ::activity_create. Your activity should expose a single method that both
 * creates (::activity_create), runs (::activity_run), and frees (::activity_free) your activity.
 * See any of the implemented activities as examples.
 */

#ifndef ACTIVITY_H
#define ACTIVITY_H

#include <wchar.h>

/** @brief A definition of a polymorphic TUI activity (through callbacks) */
typedef struct activity activity_t;

/**
 * @brief   Activity callback called when the user presses a key.
 * @details Keys pressed with Ctrl will be ignored.
 *
 * @param activity_data `activity_data` parameter in ::activity_create. Feel free to modify it.
 * @param key           Key that was pressed. May be an ncurses `KEY_*` value.
 * @param is_key_code   If the pressed key is not a character, but an ncurses `KEY_*` value.
 *
 * @return `0` to continue running the activity, any other value to stop.
 */
typedef int (*activity_keypress_callback_t)(void *activity_data, wint_t key, int is_key_code);

/**
 * @brief Activity callback called to render the activity to the ncurses' screen.
 * @param activity_data `activity_data` parameter in ::activity_create. Feel free to modify it.
 * @return `0` to continue running the activity, any other value to stop.
 */
typedef int (*activity_render_callback_t)(void *activity_data);

/**
 * @brief Activity callback called from ::activity_free, to `free` the data in @p activity_data.
 * @param activity_data `activity_data` parameter in ::activity_create.
 */
typedef void (*activity_free_data_callback_t)(void *activity_data);

/**
 * @brief   Creates an activity definition from its callbacks and initial data.
 * @details You should only use this method if you're creating your own activity.
 *
 * @param keypress_callback  See ::activity_keypress_callback_t.
 * @param render_callback    See ::activity_render_callback_t.
 * @param free_data_callback See ::activity_free_data_callback_t.
 * @param activity_data      Data passed to all of the activity's callbacks.
 *
 * @return A new activity, that must be deleted with ::activity_free. `NULL` can also be returned on
 *         failure.
 */
activity_t *activity_create(activity_keypress_callback_t  keypress_callback,
                            activity_render_callback_t    render_callback,
                            activity_free_data_callback_t free_data_callback,
                            void                         *activity_data);

/**
 * @brief   Starts an event loop to run an activity.
 * @details You should only use this method if you're creating your own activity.
 *
 * @param activity Activity to be run.
 *
 * @return The `activity_data` value provided to ::activity_create.
 */
void *activity_run(activity_t *activity);

/**
 * @brief   Frees memory for an activity generated by ::activity_create.
 * @details You should only use this method if you're creating your own activity.
 * @param   activity Activity created by ::activity_create.
 */
void activity_free(activity_t *activity);

#endif
