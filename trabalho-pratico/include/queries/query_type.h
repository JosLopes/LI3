/*
 * Copyright 2023 Humberto Gomes, José Lopes, José Matos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file    query_type.h
 * @brief   A way to define a query based on its behavior.
 * @details A query is defined by a set of callbacks, one for each specific function that can be
 *          performed (a way around C's lack of polymorphism).
 *
 * @anchor query_type_examples
 * ### Examples
 *
 * Check out implementations of existing queries (q1.h to q10.h). In summary, here is what each
 * callback that needs to be defined does:
 *
 * - ::query_type_parse_arguments_callback parses arguments after the query type + formatting flag.
 *   For example, in `1f a b c`, this method is called with {"a", "b", "c"} for `argv` and `3` for
 *   `argc`. Note that the values in `argv` must be copied in case you want to store them for later,
 *   as they may change when parsing a query file. The function must return the value that will be
 *   stored in ::query_instance::argument_data (or `NULL`) on failure.
 *
 * - ::query_type_free_query_instance_argument_data_callback frees data generated by
 *   ::query_type_parse_arguments_callback.
 *
 * After defining these methods, create a constructor for your query using ::query_type_create.
 * Remember that any ::query_type_create call must have a ::query_type_free match. This is usually
 * automatically handled by ::query_type_list_t. If you're creating a new query, you must modify
 * the source code of ::query_type_list_create to take your new query into account.
 *
 * For accessing methods of existing queries, use the getters defined in this module.
 */

#ifndef QUERY_TYPE_H
#define QUERY_TYPE_H

#include <stddef.h>

/** @brief A definition of a query. */
typedef struct query_type query_type_t;

/**
 * @brief Type of the method called for parsing query arguments.
 *
 * @param argv Arguments of the query. Do not store these pointers without first making a copy of
 *             each string.
 * @param argc Number of query arguments.
 *
 * @return `NULL` on failure, other value on success. This value will be stored in
 *         ::query_instance::argument_data.
 */
typedef void *(*query_type_parse_arguments_callback)(char **argv, size_t argc);

/**
 * @brief Type of the method called for freeing ::query_instance::argument_data.
 * @param argument_data ::query_instance::argument_data.
 */
typedef void (*query_type_free_query_instance_argument_data_callback)(void *argument_data);

/**
 * @brief Creates a query type, defining its behavior.
 *
 * @param parse_arguments                            Method that parses query arguments and
 *                                                   generates ::query_instance::argument_data.
 * @param free_query_instance_argument_data_callback Method called for freeing
 *                                                   ::query_instance::argument_data.
 *
 * @return A pointer to a new `malloc`-allocated ::query_type_t (or `NULL` on allocation failure).
 *         After being used, it must be `free`'d with ::query_type_free.
 *
 * #### Examples
 * See [the header file's documentation](@ref query_type_examples).
 */
query_type_t *query_type_create(
    query_type_parse_arguments_callback                   parse_arguments,
    query_type_free_query_instance_argument_data_callback free_query_instance_argument_data);

/**
 * @brief Gets the method called for parsing query arguments from a ::query_type_t.
 * @param type ::query_type_t to get the method called for parsing query arguments from.
 * @return The method called for parsing query arguments.
 */
query_type_parse_arguments_callback query_type_get_parse_arguments_callback(query_type_t *type);

/**
 * @brief Gets the method called for freeing ::query_instance::argument_data from a ::query_type_t.
 * @param type ::query_type_t to get the method called for freeing ::query_instance::argument_data
 *             from.
 * @return The method called for freeing ::query_instance::argument_data.
 */
query_type_free_query_instance_argument_data_callback
    query_type_get_free_query_instance_argument_data_callback(query_type_t *type);

/**
 * @brief Frees memory in a ::query_type_t.
 * @param query Query to be deleted.
 *
 * #### Examples
 * See [the header file's documentation](@ref query_type_examples).
 */
void query_type_free(query_type_t *query);

#endif
